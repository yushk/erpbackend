// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceFieldInfo 属性定义
//
// swagger:model deviceFieldInfo
type DeviceFieldInfo struct {

	// 默认值
	// Required: true
	DefaultValue *string `json:"default_value"`

	// 描述
	// Required: true
	Description *string `json:"description"`

	// float编码
	// Required: true
	FloatEncoding *string `json:"float_encoding"`

	// 最大值
	// Required: true
	Maximum *string `json:"maximum"`

	// 最小值
	// Required: true
	Minimum *string `json:"minimum"`

	// 属性名
	// Required: true
	Name *string `json:"name"`

	// 属性名是否显示
	// Required: true
	Show *bool `json:"show"`

	// 属性类型
	// Required: true
	Type *string `json:"type"`

	// 属性单位
	// Required: true
	Unit *string `json:"unit"`

	// 属性名(展示)
	// Required: true
	ViewName *string `json:"viewName"`
}

// Validate validates this device field info
func (m *DeviceFieldInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFloatEncoding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeviceFieldInfo) validateDefaultValue(formats strfmt.Registry) error {

	if err := validate.Required("default_value", "body", m.DefaultValue); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateFloatEncoding(formats strfmt.Registry) error {

	if err := validate.Required("float_encoding", "body", m.FloatEncoding); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateMaximum(formats strfmt.Registry) error {

	if err := validate.Required("maximum", "body", m.Maximum); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateMinimum(formats strfmt.Registry) error {

	if err := validate.Required("minimum", "body", m.Minimum); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateShow(formats strfmt.Registry) error {

	if err := validate.Required("show", "body", m.Show); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *DeviceFieldInfo) validateViewName(formats strfmt.Registry) error {

	if err := validate.Required("viewName", "body", m.ViewName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceFieldInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceFieldInfo) UnmarshalBinary(b []byte) error {
	var res DeviceFieldInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
