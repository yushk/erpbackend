// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FieldInfo 设备属性信息
//
// swagger:model FieldInfo
type FieldInfo struct {

	// 属性名称
	// Required: true
	FieldName *string `json:"fieldName"`

	// 属性是否显示
	// Required: true
	Show *bool `json:"show"`

	// 属性单位
	// Required: true
	Unit *string `json:"unit"`

	// 属性展示名称
	// Required: true
	ViewName *string `json:"viewName"`
}

// Validate validates this field info
func (m *FieldInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FieldInfo) validateFieldName(formats strfmt.Registry) error {

	if err := validate.Required("fieldName", "body", m.FieldName); err != nil {
		return err
	}

	return nil
}

func (m *FieldInfo) validateShow(formats strfmt.Registry) error {

	if err := validate.Required("show", "body", m.Show); err != nil {
		return err
	}

	return nil
}

func (m *FieldInfo) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *FieldInfo) validateViewName(formats strfmt.Registry) error {

	if err := validate.Required("viewName", "body", m.ViewName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FieldInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FieldInfo) UnmarshalBinary(b []byte) error {
	var res FieldInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
