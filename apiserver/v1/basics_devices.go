// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BasicsDevices 基础设备信息
//
// swagger:model basicsDevices
type BasicsDevices struct {

	// 基础设备名称
	// Required: true
	DeviceName *string `json:"deviceName"`

	// 基础设备类型
	// Required: true
	DeviceProfile *string `json:"deviceProfile"`

	// 基础设备展示名称
	// Required: true
	Name *string `json:"name"`

	// 基础设备相位
	// Required: true
	Phase *string `json:"phase"`

	// 基础设备状态
	// Required: true
	Status *int8 `json:"status"`

	// 基础设备ID
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this basics devices
func (m *BasicsDevices) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BasicsDevices) validateDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("deviceName", "body", m.DeviceName); err != nil {
		return err
	}

	return nil
}

func (m *BasicsDevices) validateDeviceProfile(formats strfmt.Registry) error {

	if err := validate.Required("deviceProfile", "body", m.DeviceProfile); err != nil {
		return err
	}

	return nil
}

func (m *BasicsDevices) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BasicsDevices) validatePhase(formats strfmt.Registry) error {

	if err := validate.Required("phase", "body", m.Phase); err != nil {
		return err
	}

	return nil
}

func (m *BasicsDevices) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *BasicsDevices) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BasicsDevices) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BasicsDevices) UnmarshalBinary(b []byte) error {
	var res BasicsDevices
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
