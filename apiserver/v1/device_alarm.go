// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeviceAlarm 通知信息
//
// swagger:model DeviceAlarm
type DeviceAlarm struct {

	// 分类
	// Required: true
	// Enum: [SECURITY HW_HEALTH SW_HEALTH]
	Category *string `json:"category"`

	// 内容
	// Required: true
	Content *string `json:"content"`

	// 创建时间(timestamp)
	// Required: true
	Created *int64 `json:"created"`

	// 描述
	// Required: true
	Description *string `json:"description"`

	// labels
	Labels []string `json:"labels"`

	// 更新时间(timestamp)
	// Required: true
	Modified *int64 `json:"modified"`

	// 发送者
	// Required: true
	Sender *string `json:"sender"`

	// severity
	// Required: true
	// Enum: [CRITICAL NORMAL]
	Severity *string `json:"severity"`

	// 产生原因
	// Required: true
	Slug *string `json:"slug"`

	// status
	// Required: true
	// Enum: [NEW PROCESSED ESCALATED]
	Status *string `json:"status"`

	// 唯一编码
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this device alarm
func (m *DeviceAlarm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSender(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deviceAlarmTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SECURITY","HW_HEALTH","SW_HEALTH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAlarmTypeCategoryPropEnum = append(deviceAlarmTypeCategoryPropEnum, v)
	}
}

const (

	// DeviceAlarmCategorySECURITY captures enum value "SECURITY"
	DeviceAlarmCategorySECURITY string = "SECURITY"

	// DeviceAlarmCategoryHWHEALTH captures enum value "HW_HEALTH"
	DeviceAlarmCategoryHWHEALTH string = "HW_HEALTH"

	// DeviceAlarmCategorySWHEALTH captures enum value "SW_HEALTH"
	DeviceAlarmCategorySWHEALTH string = "SW_HEALTH"
)

// prop value enum
func (m *DeviceAlarm) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceAlarmTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceAlarm) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	// value enum
	if err := m.validateCategoryEnum("category", "body", *m.Category); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAlarm) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("content", "body", m.Content); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAlarm) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAlarm) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAlarm) validateModified(formats strfmt.Registry) error {

	if err := validate.Required("modified", "body", m.Modified); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAlarm) validateSender(formats strfmt.Registry) error {

	if err := validate.Required("sender", "body", m.Sender); err != nil {
		return err
	}

	return nil
}

var deviceAlarmTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRITICAL","NORMAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAlarmTypeSeverityPropEnum = append(deviceAlarmTypeSeverityPropEnum, v)
	}
}

const (

	// DeviceAlarmSeverityCRITICAL captures enum value "CRITICAL"
	DeviceAlarmSeverityCRITICAL string = "CRITICAL"

	// DeviceAlarmSeverityNORMAL captures enum value "NORMAL"
	DeviceAlarmSeverityNORMAL string = "NORMAL"
)

// prop value enum
func (m *DeviceAlarm) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceAlarmTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceAlarm) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAlarm) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

var deviceAlarmTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","PROCESSED","ESCALATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deviceAlarmTypeStatusPropEnum = append(deviceAlarmTypeStatusPropEnum, v)
	}
}

const (

	// DeviceAlarmStatusNEW captures enum value "NEW"
	DeviceAlarmStatusNEW string = "NEW"

	// DeviceAlarmStatusPROCESSED captures enum value "PROCESSED"
	DeviceAlarmStatusPROCESSED string = "PROCESSED"

	// DeviceAlarmStatusESCALATED captures enum value "ESCALATED"
	DeviceAlarmStatusESCALATED string = "ESCALATED"
)

// prop value enum
func (m *DeviceAlarm) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deviceAlarmTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeviceAlarm) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DeviceAlarm) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeviceAlarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeviceAlarm) UnmarshalBinary(b []byte) error {
	var res DeviceAlarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
