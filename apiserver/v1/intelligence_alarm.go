// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntelligenceAlarm 智能告警信息
//
// swagger:model IntelligenceAlarm
type IntelligenceAlarm struct {

	// 基础设备名称
	// Required: true
	BasicsDeviceName *string `json:"basicsDeviceName"`

	// 确认状态(1:已确认，0:未确认)
	// Required: true
	ConfirmStatus *int64 `json:"confirmStatus"`

	// 确认人
	// Required: true
	ConfirmUser *string `json:"confirmUser"`

	// 告警描述
	// Required: true
	Description *string `json:"description"`

	// 设备类型
	// Required: true
	DeviceProfile *string `json:"deviceProfile"`

	// 告警结束时间
	// Required: true
	EndTime *int64 `json:"endTime"`

	// 告警级别
	// Required: true
	// Enum: [CRITICAL NORMAL]
	Severity *string `json:"severity"`

	// 告警开始时间
	// Required: true
	StartTime *int64 `json:"startTime"`

	// 变电站名称
	// Required: true
	StationName *string `json:"stationName"`

	// 检测设备名称
	// Required: true
	TestingDeviceName *string `json:"testingDeviceName"`

	// 唯一编码
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this intelligence alarm
func (m *IntelligenceAlarm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBasicsDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStationName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestingDeviceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntelligenceAlarm) validateBasicsDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("basicsDeviceName", "body", m.BasicsDeviceName); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateConfirmStatus(formats strfmt.Registry) error {

	if err := validate.Required("confirmStatus", "body", m.ConfirmStatus); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateConfirmUser(formats strfmt.Registry) error {

	if err := validate.Required("confirmUser", "body", m.ConfirmUser); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateDeviceProfile(formats strfmt.Registry) error {

	if err := validate.Required("deviceProfile", "body", m.DeviceProfile); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

var intelligenceAlarmTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CRITICAL","NORMAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intelligenceAlarmTypeSeverityPropEnum = append(intelligenceAlarmTypeSeverityPropEnum, v)
	}
}

const (

	// IntelligenceAlarmSeverityCRITICAL captures enum value "CRITICAL"
	IntelligenceAlarmSeverityCRITICAL string = "CRITICAL"

	// IntelligenceAlarmSeverityNORMAL captures enum value "NORMAL"
	IntelligenceAlarmSeverityNORMAL string = "NORMAL"
)

// prop value enum
func (m *IntelligenceAlarm) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intelligenceAlarmTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntelligenceAlarm) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateStationName(formats strfmt.Registry) error {

	if err := validate.Required("stationName", "body", m.StationName); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateTestingDeviceName(formats strfmt.Registry) error {

	if err := validate.Required("testingDeviceName", "body", m.TestingDeviceName); err != nil {
		return err
	}

	return nil
}

func (m *IntelligenceAlarm) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntelligenceAlarm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntelligenceAlarm) UnmarshalBinary(b []byte) error {
	var res IntelligenceAlarm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
