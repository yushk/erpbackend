// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CleaningRules 数据清洗配置规则信息
//
// swagger:model CleaningRules
type CleaningRules struct {

	// 规则名称
	// Required: true
	RuleName *string `json:"ruleName"`

	// 规则列表
	SingleRules []*SingleRule `json:"singleRules"`

	// 规则ID
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this cleaning rules
func (m *CleaningRules) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRuleName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSingleRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CleaningRules) validateRuleName(formats strfmt.Registry) error {

	if err := validate.Required("ruleName", "body", m.RuleName); err != nil {
		return err
	}

	return nil
}

func (m *CleaningRules) validateSingleRules(formats strfmt.Registry) error {

	if swag.IsZero(m.SingleRules) { // not required
		return nil
	}

	for i := 0; i < len(m.SingleRules); i++ {
		if swag.IsZero(m.SingleRules[i]) { // not required
			continue
		}

		if m.SingleRules[i] != nil {
			if err := m.SingleRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("singleRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CleaningRules) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CleaningRules) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CleaningRules) UnmarshalBinary(b []byte) error {
	var res CleaningRules
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
