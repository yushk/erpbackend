// Code generated by go-swagger; DO NOT EDIT.

package v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CleaningConfigs 数据清洗配置
//
// swagger:model CleaningConfigs
type CleaningConfigs struct {

	// 激活规则ID
	// Required: true
	ActiveRule *string `json:"activeRule"`

	// 配置状态（1:已生效，0:未生效）
	// Required: true
	ConfigStatus *int64 `json:"configStatus"`

	// 设备类型
	// Required: true
	DeviceProfile *string `json:"deviceProfile"`

	// 初始值计算周期
	// Required: true
	InitValueCycle *int64 `json:"initValueCycle"`

	// 规则列表
	Rules []*CleaningRules `json:"rules"`

	// 是否区分相位
	// Required: true
	ThreePhase *string `json:"threePhase"`

	// 数据清洗配置ID
	// Required: true
	UUID *string `json:"uuid"`
}

// Validate validates this cleaning configs
func (m *CleaningConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveRule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeviceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitValueCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreePhase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CleaningConfigs) validateActiveRule(formats strfmt.Registry) error {

	if err := validate.Required("activeRule", "body", m.ActiveRule); err != nil {
		return err
	}

	return nil
}

func (m *CleaningConfigs) validateConfigStatus(formats strfmt.Registry) error {

	if err := validate.Required("configStatus", "body", m.ConfigStatus); err != nil {
		return err
	}

	return nil
}

func (m *CleaningConfigs) validateDeviceProfile(formats strfmt.Registry) error {

	if err := validate.Required("deviceProfile", "body", m.DeviceProfile); err != nil {
		return err
	}

	return nil
}

func (m *CleaningConfigs) validateInitValueCycle(formats strfmt.Registry) error {

	if err := validate.Required("initValueCycle", "body", m.InitValueCycle); err != nil {
		return err
	}

	return nil
}

func (m *CleaningConfigs) validateRules(formats strfmt.Registry) error {

	if swag.IsZero(m.Rules) { // not required
		return nil
	}

	for i := 0; i < len(m.Rules); i++ {
		if swag.IsZero(m.Rules[i]) { // not required
			continue
		}

		if m.Rules[i] != nil {
			if err := m.Rules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CleaningConfigs) validateThreePhase(formats strfmt.Registry) error {

	if err := validate.Required("threePhase", "body", m.ThreePhase); err != nil {
		return err
	}

	return nil
}

func (m *CleaningConfigs) validateUUID(formats strfmt.Registry) error {

	if err := validate.Required("uuid", "body", m.UUID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CleaningConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CleaningConfigs) UnmarshalBinary(b []byte) error {
	var res CleaningConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
