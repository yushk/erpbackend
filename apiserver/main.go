package main

import (
	"context"
	"log"
	"os"
	"time"

	"swagger/apiserver/components/database"
	"swagger/apiserver/restapi"
	"swagger/apiserver/restapi/operations"
	v1 "swagger/apiserver/v1"
	"swagger/pkg/config"
	"swagger/pkg/helper"

	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"
	"github.com/rs/xid"
	"github.com/sirupsen/logrus"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}
	// 初期化证书
	config.Init()
	keyPath := config.GetString(config.CaKeyPath)
	pemPath := config.GetString(config.CaPemPath)
	err = helper.InitCerts(keyPath, pemPath)

	api := operations.NewMaterialAPI(swaggerSpec)
	server := restapi.NewServer(api)
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "智慧变电站边缘计算平台系统"
	parser.LongDescription = "智慧变电站边缘计算平台系统API"
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()
	var dbType = config.GetString(config.DBType)
	client, err := database.New(database.Type(dbType))
	id := xid.New().String()
	username := config.GetString(config.RootUsername)
	password := config.GetString(config.RootPassword)
	currentTime := time.Now().UnixNano() / 1e6
	RoleRoot := "root"
	ctx := context.TODO()
	_, err = client.GetUserByName(ctx, username)
	if err != nil {
		logrus.Debugln("get root user error", err)
		_, err = client.RegisterUser(ctx, &v1.User{
			ID:       &id,
			Name:     &username,
			Role:     &RoleRoot,
			Created:  &currentTime,
			Modified: &currentTime,
		}, password)
		if err != nil {
			logrus.WithError(err).Errorln("create root user error")
		}
	}

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}

}
