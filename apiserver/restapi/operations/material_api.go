// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"swagger/apiserver/restapi/operations/alarm"
	"swagger/apiserver/restapi/operations/analysis"
	"swagger/apiserver/restapi/operations/config"
	"swagger/apiserver/restapi/operations/data"
	"swagger/apiserver/restapi/operations/device"
	"swagger/apiserver/restapi/operations/dga"
	"swagger/apiserver/restapi/operations/file"
	"swagger/apiserver/restapi/operations/logr"
	"swagger/apiserver/restapi/operations/oauth"
	"swagger/apiserver/restapi/operations/system"
	"swagger/apiserver/restapi/operations/template"
	"swagger/apiserver/restapi/operations/user"
	v1 "swagger/apiserver/v1"
)

// NewMaterialAPI creates a new Material instance
func NewMaterialAPI(spec *loads.Document) *MaterialAPI {
	return &MaterialAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		JSONConsumer:    runtime.JSONConsumer(),
		UrlformConsumer: runtime.DiscardConsumer,

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		AnalysisAggregateHandler: analysis.AggregateHandlerFunc(func(params analysis.AggregateParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation analysis.Aggregate has not yet been implemented")
		}),
		UserChangeCurrentUserPasswordHandler: user.ChangeCurrentUserPasswordHandlerFunc(func(params user.ChangeCurrentUserPasswordParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.ChangeCurrentUserPassword has not yet been implemented")
		}),
		UserChangeUserPasswordHandler: user.ChangeUserPasswordHandlerFunc(func(params user.ChangeUserPasswordParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.ChangeUserPassword has not yet been implemented")
		}),
		DeviceCheckBasicsDevicePhaseHandler: device.CheckBasicsDevicePhaseHandlerFunc(func(params device.CheckBasicsDevicePhaseParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation device.CheckBasicsDevicePhase has not yet been implemented")
		}),
		SystemConfigHandler: system.ConfigHandlerFunc(func(params system.ConfigParams) middleware.Responder {
			return middleware.NotImplemented("operation system.Config has not yet been implemented")
		}),
		DgaConfirmEarlyAlarmHandler: dga.ConfirmEarlyAlarmHandlerFunc(func(params dga.ConfirmEarlyAlarmParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation dga.ConfirmEarlyAlarm has not yet been implemented")
		}),
		AlarmConfirmIntelligenceAlarmHandler: alarm.ConfirmIntelligenceAlarmHandlerFunc(func(params alarm.ConfirmIntelligenceAlarmParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.ConfirmIntelligenceAlarm has not yet been implemented")
		}),
		AlarmConfirmLimitAlarmHandler: alarm.ConfirmLimitAlarmHandlerFunc(func(params alarm.ConfirmLimitAlarmParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.ConfirmLimitAlarm has not yet been implemented")
		}),
		AlarmConfirmTransferAlarmHandler: alarm.ConfirmTransferAlarmHandlerFunc(func(params alarm.ConfirmTransferAlarmParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.ConfirmTransferAlarm has not yet been implemented")
		}),
		ConfigControlAlarmTaskHandler: config.ControlAlarmTaskHandlerFunc(func(params config.ControlAlarmTaskParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.ControlAlarmTask has not yet been implemented")
		}),
		ConfigCreateCleaningConfigsHandler: config.CreateCleaningConfigsHandlerFunc(func(params config.CreateCleaningConfigsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.CreateCleaningConfigs has not yet been implemented")
		}),
		DeviceCreateDeviceHandler: device.CreateDeviceHandlerFunc(func(params device.CreateDeviceParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation device.CreateDevice has not yet been implemented")
		}),
		UserCreateUserHandler: user.CreateUserHandlerFunc(func(params user.CreateUserParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.CreateUser has not yet been implemented")
		}),
		ConfigDeleteCleaningConfigsHandler: config.DeleteCleaningConfigsHandlerFunc(func(params config.DeleteCleaningConfigsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.DeleteCleaningConfigs has not yet been implemented")
		}),
		DeviceDeleteDeviceHandler: device.DeleteDeviceHandlerFunc(func(params device.DeleteDeviceParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation device.DeleteDevice has not yet been implemented")
		}),
		UserDeleteUserHandler: user.DeleteUserHandlerFunc(func(params user.DeleteUserParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.DeleteUser has not yet been implemented")
		}),
		FileDownloadFileHandler: file.DownloadFileHandlerFunc(func(params file.DownloadFileParams) middleware.Responder {
			return middleware.NotImplemented("operation file.DownloadFile has not yet been implemented")
		}),
		ConfigGetAlarmConfigsHandler: config.GetAlarmConfigsHandlerFunc(func(params config.GetAlarmConfigsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.GetAlarmConfigs has not yet been implemented")
		}),
		DeviceGetBasicsDevicesHandler: device.GetBasicsDevicesHandlerFunc(func(params device.GetBasicsDevicesParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation device.GetBasicsDevices has not yet been implemented")
		}),
		ConfigGetCleaningConfigsHandler: config.GetCleaningConfigsHandlerFunc(func(params config.GetCleaningConfigsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.GetCleaningConfigs has not yet been implemented")
		}),
		AlarmGetDeviceAlarmsHandler: alarm.GetDeviceAlarmsHandlerFunc(func(params alarm.GetDeviceAlarmsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.GetDeviceAlarms has not yet been implemented")
		}),
		DataGetDeviceChartsHandler: data.GetDeviceChartsHandlerFunc(func(params data.GetDeviceChartsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation data.GetDeviceCharts has not yet been implemented")
		}),
		TemplateGetDeviceFieldInfosHandler: template.GetDeviceFieldInfosHandlerFunc(func(params template.GetDeviceFieldInfosParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation template.GetDeviceFieldInfos has not yet been implemented")
		}),
		TemplateGetDeviceTemplateInfosHandler: template.GetDeviceTemplateInfosHandlerFunc(func(params template.GetDeviceTemplateInfosParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation template.GetDeviceTemplateInfos has not yet been implemented")
		}),
		DataGetDeviceValuesHandler: data.GetDeviceValuesHandlerFunc(func(params data.GetDeviceValuesParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation data.GetDeviceValues has not yet been implemented")
		}),
		DeviceGetDevicesHandler: device.GetDevicesHandlerFunc(func(params device.GetDevicesParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation device.GetDevices has not yet been implemented")
		}),
		DgaGetEarlyAlarmConfigHandler: dga.GetEarlyAlarmConfigHandlerFunc(func(params dga.GetEarlyAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation dga.GetEarlyAlarmConfig has not yet been implemented")
		}),
		DgaGetEarlyAlarmsHandler: dga.GetEarlyAlarmsHandlerFunc(func(params dga.GetEarlyAlarmsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation dga.GetEarlyAlarms has not yet been implemented")
		}),
		DgaGetEarlyHistoryAlarmsHandler: dga.GetEarlyHistoryAlarmsHandlerFunc(func(params dga.GetEarlyHistoryAlarmsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation dga.GetEarlyHistoryAlarms has not yet been implemented")
		}),
		AlarmGetHistoryLimitAlarmsHandler: alarm.GetHistoryLimitAlarmsHandlerFunc(func(params alarm.GetHistoryLimitAlarmsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.GetHistoryLimitAlarms has not yet been implemented")
		}),
		AlarmGetHistoryTransferAlarmsHandler: alarm.GetHistoryTransferAlarmsHandlerFunc(func(params alarm.GetHistoryTransferAlarmsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.GetHistoryTransferAlarms has not yet been implemented")
		}),
		AlarmGetIntelligenceAlarmsHandler: alarm.GetIntelligenceAlarmsHandlerFunc(func(params alarm.GetIntelligenceAlarmsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.GetIntelligenceAlarms has not yet been implemented")
		}),
		AlarmGetLimitAlarmConfigHandler: alarm.GetLimitAlarmConfigHandlerFunc(func(params alarm.GetLimitAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.GetLimitAlarmConfig has not yet been implemented")
		}),
		AlarmGetLimitAlarmsHandler: alarm.GetLimitAlarmsHandlerFunc(func(params alarm.GetLimitAlarmsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.GetLimitAlarms has not yet been implemented")
		}),
		LogrGetLogsHandler: logr.GetLogsHandlerFunc(func(params logr.GetLogsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation logr.GetLogs has not yet been implemented")
		}),
		DataGetLongitudinalChartsHandler: data.GetLongitudinalChartsHandlerFunc(func(params data.GetLongitudinalChartsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation data.GetLongitudinalCharts has not yet been implemented")
		}),
		DeviceGetSimilarTestingDevicesHandler: device.GetSimilarTestingDevicesHandlerFunc(func(params device.GetSimilarTestingDevicesParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation device.GetSimilarTestingDevices has not yet been implemented")
		}),
		ConfigGetTransferAlarmConfigHandler: config.GetTransferAlarmConfigHandlerFunc(func(params config.GetTransferAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.GetTransferAlarmConfig has not yet been implemented")
		}),
		AlarmGetTransferAlarmsHandler: alarm.GetTransferAlarmsHandlerFunc(func(params alarm.GetTransferAlarmsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.GetTransferAlarms has not yet been implemented")
		}),
		DataGetTransverseChartsHandler: data.GetTransverseChartsHandlerFunc(func(params data.GetTransverseChartsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation data.GetTransverseCharts has not yet been implemented")
		}),
		UserGetUserHandler: user.GetUserHandlerFunc(func(params user.GetUserParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUser has not yet been implemented")
		}),
		UserGetUserInfoHandler: user.GetUserInfoHandlerFunc(func(params user.GetUserInfoParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUserInfo has not yet been implemented")
		}),
		UserGetUsersHandler: user.GetUsersHandlerFunc(func(params user.GetUsersParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.GetUsers has not yet been implemented")
		}),
		UserLoginHandler: user.LoginHandlerFunc(func(params user.LoginParams) middleware.Responder {
			return middleware.NotImplemented("operation user.Login has not yet been implemented")
		}),
		UserLogoutHandler: user.LogoutHandlerFunc(func(params user.LogoutParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.Logout has not yet been implemented")
		}),
		DgaModifyEarlyAlarmConfigHandler: dga.ModifyEarlyAlarmConfigHandlerFunc(func(params dga.ModifyEarlyAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation dga.ModifyEarlyAlarmConfig has not yet been implemented")
		}),
		AlarmModifyLimitAlarmConfigHandler: alarm.ModifyLimitAlarmConfigHandlerFunc(func(params alarm.ModifyLimitAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.ModifyLimitAlarmConfig has not yet been implemented")
		}),
		ConfigModifyTransferAlarmConfigHandler: config.ModifyTransferAlarmConfigHandlerFunc(func(params config.ModifyTransferAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.ModifyTransferAlarmConfig has not yet been implemented")
		}),
		SystemPingHandler: system.PingHandlerFunc(func(params system.PingParams) middleware.Responder {
			return middleware.NotImplemented("operation system.Ping has not yet been implemented")
		}),
		DgaReceiveDataHandler: dga.ReceiveDataHandlerFunc(func(params dga.ReceiveDataParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation dga.ReceiveData has not yet been implemented")
		}),
		OauthRefreshTokenHandler: oauth.RefreshTokenHandlerFunc(func(params oauth.RefreshTokenParams) middleware.Responder {
			return middleware.NotImplemented("operation oauth.RefreshToken has not yet been implemented")
		}),
		TemplateSynchronizeDeviceTemplateInfoHandler: template.SynchronizeDeviceTemplateInfoHandlerFunc(func(params template.SynchronizeDeviceTemplateInfoParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation template.SynchronizeDeviceTemplateInfo has not yet been implemented")
		}),
		OauthTokenHandler: oauth.TokenHandlerFunc(func(params oauth.TokenParams) middleware.Responder {
			return middleware.NotImplemented("operation oauth.Token has not yet been implemented")
		}),
		ConfigUpdateAlarmConfigsHandler: config.UpdateAlarmConfigsHandlerFunc(func(params config.UpdateAlarmConfigsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.UpdateAlarmConfigs has not yet been implemented")
		}),
		ConfigUpdateCleaningActiveRuleHandler: config.UpdateCleaningActiveRuleHandlerFunc(func(params config.UpdateCleaningActiveRuleParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.UpdateCleaningActiveRule has not yet been implemented")
		}),
		ConfigUpdateCleaningConfigsHandler: config.UpdateCleaningConfigsHandlerFunc(func(params config.UpdateCleaningConfigsParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.UpdateCleaningConfigs has not yet been implemented")
		}),
		DeviceUpdateDeviceHandler: device.UpdateDeviceHandlerFunc(func(params device.UpdateDeviceParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation device.UpdateDevice has not yet been implemented")
		}),
		TemplateUpdateDeviceFieldInfoHandler: template.UpdateDeviceFieldInfoHandlerFunc(func(params template.UpdateDeviceFieldInfoParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation template.UpdateDeviceFieldInfo has not yet been implemented")
		}),
		TemplateUpdateDeviceProfileInfoHandler: template.UpdateDeviceProfileInfoHandlerFunc(func(params template.UpdateDeviceProfileInfoParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation template.UpdateDeviceProfileInfo has not yet been implemented")
		}),
		DgaUpdateEarlyAlarmConfigHandler: dga.UpdateEarlyAlarmConfigHandlerFunc(func(params dga.UpdateEarlyAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation dga.UpdateEarlyAlarmConfig has not yet been implemented")
		}),
		AlarmUpdateLimitAlarmConfigHandler: alarm.UpdateLimitAlarmConfigHandlerFunc(func(params alarm.UpdateLimitAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation alarm.UpdateLimitAlarmConfig has not yet been implemented")
		}),
		ConfigUpdateTransferAlarmConfigHandler: config.UpdateTransferAlarmConfigHandlerFunc(func(params config.UpdateTransferAlarmConfigParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation config.UpdateTransferAlarmConfig has not yet been implemented")
		}),
		UserUpdateUserHandler: user.UpdateUserHandlerFunc(func(params user.UpdateUserParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation user.UpdateUser has not yet been implemented")
		}),
		DeviceUploadDevicesHandler: device.UploadDevicesHandlerFunc(func(params device.UploadDevicesParams, principal *v1.Principal) middleware.Responder {
			return middleware.NotImplemented("operation device.UploadDevices has not yet been implemented")
		}),
		SystemVersionHandler: system.VersionHandlerFunc(func(params system.VersionParams) middleware.Responder {
			return middleware.NotImplemented("operation system.Version has not yet been implemented")
		}),

		OAuth2Auth: func(token string, scopes []string) (*v1.Principal, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (OAuth2) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*MaterialAPI 智慧变电站边缘计算平台系统API */
type MaterialAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer
	// UrlformConsumer registers a consumer for the following mime types:
	//   - application/x-www-form-urlencoded
	UrlformConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// OAuth2Auth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	OAuth2Auth func(string, []string) (*v1.Principal, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// AnalysisAggregateHandler sets the operation handler for the aggregate operation
	AnalysisAggregateHandler analysis.AggregateHandler
	// UserChangeCurrentUserPasswordHandler sets the operation handler for the change current user password operation
	UserChangeCurrentUserPasswordHandler user.ChangeCurrentUserPasswordHandler
	// UserChangeUserPasswordHandler sets the operation handler for the change user password operation
	UserChangeUserPasswordHandler user.ChangeUserPasswordHandler
	// DeviceCheckBasicsDevicePhaseHandler sets the operation handler for the check basics device phase operation
	DeviceCheckBasicsDevicePhaseHandler device.CheckBasicsDevicePhaseHandler
	// SystemConfigHandler sets the operation handler for the config operation
	SystemConfigHandler system.ConfigHandler
	// DgaConfirmEarlyAlarmHandler sets the operation handler for the confirm early alarm operation
	DgaConfirmEarlyAlarmHandler dga.ConfirmEarlyAlarmHandler
	// AlarmConfirmIntelligenceAlarmHandler sets the operation handler for the confirm intelligence alarm operation
	AlarmConfirmIntelligenceAlarmHandler alarm.ConfirmIntelligenceAlarmHandler
	// AlarmConfirmLimitAlarmHandler sets the operation handler for the confirm limit alarm operation
	AlarmConfirmLimitAlarmHandler alarm.ConfirmLimitAlarmHandler
	// AlarmConfirmTransferAlarmHandler sets the operation handler for the confirm transfer alarm operation
	AlarmConfirmTransferAlarmHandler alarm.ConfirmTransferAlarmHandler
	// ConfigControlAlarmTaskHandler sets the operation handler for the control alarm task operation
	ConfigControlAlarmTaskHandler config.ControlAlarmTaskHandler
	// ConfigCreateCleaningConfigsHandler sets the operation handler for the create cleaning configs operation
	ConfigCreateCleaningConfigsHandler config.CreateCleaningConfigsHandler
	// DeviceCreateDeviceHandler sets the operation handler for the create device operation
	DeviceCreateDeviceHandler device.CreateDeviceHandler
	// UserCreateUserHandler sets the operation handler for the create user operation
	UserCreateUserHandler user.CreateUserHandler
	// ConfigDeleteCleaningConfigsHandler sets the operation handler for the delete cleaning configs operation
	ConfigDeleteCleaningConfigsHandler config.DeleteCleaningConfigsHandler
	// DeviceDeleteDeviceHandler sets the operation handler for the delete device operation
	DeviceDeleteDeviceHandler device.DeleteDeviceHandler
	// UserDeleteUserHandler sets the operation handler for the delete user operation
	UserDeleteUserHandler user.DeleteUserHandler
	// FileDownloadFileHandler sets the operation handler for the download file operation
	FileDownloadFileHandler file.DownloadFileHandler
	// ConfigGetAlarmConfigsHandler sets the operation handler for the get alarm configs operation
	ConfigGetAlarmConfigsHandler config.GetAlarmConfigsHandler
	// DeviceGetBasicsDevicesHandler sets the operation handler for the get basics devices operation
	DeviceGetBasicsDevicesHandler device.GetBasicsDevicesHandler
	// ConfigGetCleaningConfigsHandler sets the operation handler for the get cleaning configs operation
	ConfigGetCleaningConfigsHandler config.GetCleaningConfigsHandler
	// AlarmGetDeviceAlarmsHandler sets the operation handler for the get device alarms operation
	AlarmGetDeviceAlarmsHandler alarm.GetDeviceAlarmsHandler
	// DataGetDeviceChartsHandler sets the operation handler for the get device charts operation
	DataGetDeviceChartsHandler data.GetDeviceChartsHandler
	// TemplateGetDeviceFieldInfosHandler sets the operation handler for the get device field infos operation
	TemplateGetDeviceFieldInfosHandler template.GetDeviceFieldInfosHandler
	// TemplateGetDeviceTemplateInfosHandler sets the operation handler for the get device template infos operation
	TemplateGetDeviceTemplateInfosHandler template.GetDeviceTemplateInfosHandler
	// DataGetDeviceValuesHandler sets the operation handler for the get device values operation
	DataGetDeviceValuesHandler data.GetDeviceValuesHandler
	// DeviceGetDevicesHandler sets the operation handler for the get devices operation
	DeviceGetDevicesHandler device.GetDevicesHandler
	// DgaGetEarlyAlarmConfigHandler sets the operation handler for the get early alarm config operation
	DgaGetEarlyAlarmConfigHandler dga.GetEarlyAlarmConfigHandler
	// DgaGetEarlyAlarmsHandler sets the operation handler for the get early alarms operation
	DgaGetEarlyAlarmsHandler dga.GetEarlyAlarmsHandler
	// DgaGetEarlyHistoryAlarmsHandler sets the operation handler for the get early history alarms operation
	DgaGetEarlyHistoryAlarmsHandler dga.GetEarlyHistoryAlarmsHandler
	// AlarmGetHistoryLimitAlarmsHandler sets the operation handler for the get history limit alarms operation
	AlarmGetHistoryLimitAlarmsHandler alarm.GetHistoryLimitAlarmsHandler
	// AlarmGetHistoryTransferAlarmsHandler sets the operation handler for the get history transfer alarms operation
	AlarmGetHistoryTransferAlarmsHandler alarm.GetHistoryTransferAlarmsHandler
	// AlarmGetIntelligenceAlarmsHandler sets the operation handler for the get intelligence alarms operation
	AlarmGetIntelligenceAlarmsHandler alarm.GetIntelligenceAlarmsHandler
	// AlarmGetLimitAlarmConfigHandler sets the operation handler for the get limit alarm config operation
	AlarmGetLimitAlarmConfigHandler alarm.GetLimitAlarmConfigHandler
	// AlarmGetLimitAlarmsHandler sets the operation handler for the get limit alarms operation
	AlarmGetLimitAlarmsHandler alarm.GetLimitAlarmsHandler
	// LogrGetLogsHandler sets the operation handler for the get logs operation
	LogrGetLogsHandler logr.GetLogsHandler
	// DataGetLongitudinalChartsHandler sets the operation handler for the get longitudinal charts operation
	DataGetLongitudinalChartsHandler data.GetLongitudinalChartsHandler
	// DeviceGetSimilarTestingDevicesHandler sets the operation handler for the get similar testing devices operation
	DeviceGetSimilarTestingDevicesHandler device.GetSimilarTestingDevicesHandler
	// ConfigGetTransferAlarmConfigHandler sets the operation handler for the get transfer alarm config operation
	ConfigGetTransferAlarmConfigHandler config.GetTransferAlarmConfigHandler
	// AlarmGetTransferAlarmsHandler sets the operation handler for the get transfer alarms operation
	AlarmGetTransferAlarmsHandler alarm.GetTransferAlarmsHandler
	// DataGetTransverseChartsHandler sets the operation handler for the get transverse charts operation
	DataGetTransverseChartsHandler data.GetTransverseChartsHandler
	// UserGetUserHandler sets the operation handler for the get user operation
	UserGetUserHandler user.GetUserHandler
	// UserGetUserInfoHandler sets the operation handler for the get user info operation
	UserGetUserInfoHandler user.GetUserInfoHandler
	// UserGetUsersHandler sets the operation handler for the get users operation
	UserGetUsersHandler user.GetUsersHandler
	// UserLoginHandler sets the operation handler for the login operation
	UserLoginHandler user.LoginHandler
	// UserLogoutHandler sets the operation handler for the logout operation
	UserLogoutHandler user.LogoutHandler
	// DgaModifyEarlyAlarmConfigHandler sets the operation handler for the modify early alarm config operation
	DgaModifyEarlyAlarmConfigHandler dga.ModifyEarlyAlarmConfigHandler
	// AlarmModifyLimitAlarmConfigHandler sets the operation handler for the modify limit alarm config operation
	AlarmModifyLimitAlarmConfigHandler alarm.ModifyLimitAlarmConfigHandler
	// ConfigModifyTransferAlarmConfigHandler sets the operation handler for the modify transfer alarm config operation
	ConfigModifyTransferAlarmConfigHandler config.ModifyTransferAlarmConfigHandler
	// SystemPingHandler sets the operation handler for the ping operation
	SystemPingHandler system.PingHandler
	// DgaReceiveDataHandler sets the operation handler for the receive data operation
	DgaReceiveDataHandler dga.ReceiveDataHandler
	// OauthRefreshTokenHandler sets the operation handler for the refresh token operation
	OauthRefreshTokenHandler oauth.RefreshTokenHandler
	// TemplateSynchronizeDeviceTemplateInfoHandler sets the operation handler for the synchronize device template info operation
	TemplateSynchronizeDeviceTemplateInfoHandler template.SynchronizeDeviceTemplateInfoHandler
	// OauthTokenHandler sets the operation handler for the token operation
	OauthTokenHandler oauth.TokenHandler
	// ConfigUpdateAlarmConfigsHandler sets the operation handler for the update alarm configs operation
	ConfigUpdateAlarmConfigsHandler config.UpdateAlarmConfigsHandler
	// ConfigUpdateCleaningActiveRuleHandler sets the operation handler for the update cleaning active rule operation
	ConfigUpdateCleaningActiveRuleHandler config.UpdateCleaningActiveRuleHandler
	// ConfigUpdateCleaningConfigsHandler sets the operation handler for the update cleaning configs operation
	ConfigUpdateCleaningConfigsHandler config.UpdateCleaningConfigsHandler
	// DeviceUpdateDeviceHandler sets the operation handler for the update device operation
	DeviceUpdateDeviceHandler device.UpdateDeviceHandler
	// TemplateUpdateDeviceFieldInfoHandler sets the operation handler for the update device field info operation
	TemplateUpdateDeviceFieldInfoHandler template.UpdateDeviceFieldInfoHandler
	// TemplateUpdateDeviceProfileInfoHandler sets the operation handler for the update device profile info operation
	TemplateUpdateDeviceProfileInfoHandler template.UpdateDeviceProfileInfoHandler
	// DgaUpdateEarlyAlarmConfigHandler sets the operation handler for the update early alarm config operation
	DgaUpdateEarlyAlarmConfigHandler dga.UpdateEarlyAlarmConfigHandler
	// AlarmUpdateLimitAlarmConfigHandler sets the operation handler for the update limit alarm config operation
	AlarmUpdateLimitAlarmConfigHandler alarm.UpdateLimitAlarmConfigHandler
	// ConfigUpdateTransferAlarmConfigHandler sets the operation handler for the update transfer alarm config operation
	ConfigUpdateTransferAlarmConfigHandler config.UpdateTransferAlarmConfigHandler
	// UserUpdateUserHandler sets the operation handler for the update user operation
	UserUpdateUserHandler user.UpdateUserHandler
	// DeviceUploadDevicesHandler sets the operation handler for the upload devices operation
	DeviceUploadDevicesHandler device.UploadDevicesHandler
	// SystemVersionHandler sets the operation handler for the version operation
	SystemVersionHandler system.VersionHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *MaterialAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *MaterialAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *MaterialAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *MaterialAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *MaterialAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *MaterialAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *MaterialAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *MaterialAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *MaterialAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the MaterialAPI
func (o *MaterialAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}
	if o.UrlformConsumer == nil {
		unregistered = append(unregistered, "UrlformConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.OAuth2Auth == nil {
		unregistered = append(unregistered, "OAuth2Auth")
	}

	if o.AnalysisAggregateHandler == nil {
		unregistered = append(unregistered, "analysis.AggregateHandler")
	}
	if o.UserChangeCurrentUserPasswordHandler == nil {
		unregistered = append(unregistered, "user.ChangeCurrentUserPasswordHandler")
	}
	if o.UserChangeUserPasswordHandler == nil {
		unregistered = append(unregistered, "user.ChangeUserPasswordHandler")
	}
	if o.DeviceCheckBasicsDevicePhaseHandler == nil {
		unregistered = append(unregistered, "device.CheckBasicsDevicePhaseHandler")
	}
	if o.SystemConfigHandler == nil {
		unregistered = append(unregistered, "system.ConfigHandler")
	}
	if o.DgaConfirmEarlyAlarmHandler == nil {
		unregistered = append(unregistered, "dga.ConfirmEarlyAlarmHandler")
	}
	if o.AlarmConfirmIntelligenceAlarmHandler == nil {
		unregistered = append(unregistered, "alarm.ConfirmIntelligenceAlarmHandler")
	}
	if o.AlarmConfirmLimitAlarmHandler == nil {
		unregistered = append(unregistered, "alarm.ConfirmLimitAlarmHandler")
	}
	if o.AlarmConfirmTransferAlarmHandler == nil {
		unregistered = append(unregistered, "alarm.ConfirmTransferAlarmHandler")
	}
	if o.ConfigControlAlarmTaskHandler == nil {
		unregistered = append(unregistered, "config.ControlAlarmTaskHandler")
	}
	if o.ConfigCreateCleaningConfigsHandler == nil {
		unregistered = append(unregistered, "config.CreateCleaningConfigsHandler")
	}
	if o.DeviceCreateDeviceHandler == nil {
		unregistered = append(unregistered, "device.CreateDeviceHandler")
	}
	if o.UserCreateUserHandler == nil {
		unregistered = append(unregistered, "user.CreateUserHandler")
	}
	if o.ConfigDeleteCleaningConfigsHandler == nil {
		unregistered = append(unregistered, "config.DeleteCleaningConfigsHandler")
	}
	if o.DeviceDeleteDeviceHandler == nil {
		unregistered = append(unregistered, "device.DeleteDeviceHandler")
	}
	if o.UserDeleteUserHandler == nil {
		unregistered = append(unregistered, "user.DeleteUserHandler")
	}
	if o.FileDownloadFileHandler == nil {
		unregistered = append(unregistered, "file.DownloadFileHandler")
	}
	if o.ConfigGetAlarmConfigsHandler == nil {
		unregistered = append(unregistered, "config.GetAlarmConfigsHandler")
	}
	if o.DeviceGetBasicsDevicesHandler == nil {
		unregistered = append(unregistered, "device.GetBasicsDevicesHandler")
	}
	if o.ConfigGetCleaningConfigsHandler == nil {
		unregistered = append(unregistered, "config.GetCleaningConfigsHandler")
	}
	if o.AlarmGetDeviceAlarmsHandler == nil {
		unregistered = append(unregistered, "alarm.GetDeviceAlarmsHandler")
	}
	if o.DataGetDeviceChartsHandler == nil {
		unregistered = append(unregistered, "data.GetDeviceChartsHandler")
	}
	if o.TemplateGetDeviceFieldInfosHandler == nil {
		unregistered = append(unregistered, "template.GetDeviceFieldInfosHandler")
	}
	if o.TemplateGetDeviceTemplateInfosHandler == nil {
		unregistered = append(unregistered, "template.GetDeviceTemplateInfosHandler")
	}
	if o.DataGetDeviceValuesHandler == nil {
		unregistered = append(unregistered, "data.GetDeviceValuesHandler")
	}
	if o.DeviceGetDevicesHandler == nil {
		unregistered = append(unregistered, "device.GetDevicesHandler")
	}
	if o.DgaGetEarlyAlarmConfigHandler == nil {
		unregistered = append(unregistered, "dga.GetEarlyAlarmConfigHandler")
	}
	if o.DgaGetEarlyAlarmsHandler == nil {
		unregistered = append(unregistered, "dga.GetEarlyAlarmsHandler")
	}
	if o.DgaGetEarlyHistoryAlarmsHandler == nil {
		unregistered = append(unregistered, "dga.GetEarlyHistoryAlarmsHandler")
	}
	if o.AlarmGetHistoryLimitAlarmsHandler == nil {
		unregistered = append(unregistered, "alarm.GetHistoryLimitAlarmsHandler")
	}
	if o.AlarmGetHistoryTransferAlarmsHandler == nil {
		unregistered = append(unregistered, "alarm.GetHistoryTransferAlarmsHandler")
	}
	if o.AlarmGetIntelligenceAlarmsHandler == nil {
		unregistered = append(unregistered, "alarm.GetIntelligenceAlarmsHandler")
	}
	if o.AlarmGetLimitAlarmConfigHandler == nil {
		unregistered = append(unregistered, "alarm.GetLimitAlarmConfigHandler")
	}
	if o.AlarmGetLimitAlarmsHandler == nil {
		unregistered = append(unregistered, "alarm.GetLimitAlarmsHandler")
	}
	if o.LogrGetLogsHandler == nil {
		unregistered = append(unregistered, "logr.GetLogsHandler")
	}
	if o.DataGetLongitudinalChartsHandler == nil {
		unregistered = append(unregistered, "data.GetLongitudinalChartsHandler")
	}
	if o.DeviceGetSimilarTestingDevicesHandler == nil {
		unregistered = append(unregistered, "device.GetSimilarTestingDevicesHandler")
	}
	if o.ConfigGetTransferAlarmConfigHandler == nil {
		unregistered = append(unregistered, "config.GetTransferAlarmConfigHandler")
	}
	if o.AlarmGetTransferAlarmsHandler == nil {
		unregistered = append(unregistered, "alarm.GetTransferAlarmsHandler")
	}
	if o.DataGetTransverseChartsHandler == nil {
		unregistered = append(unregistered, "data.GetTransverseChartsHandler")
	}
	if o.UserGetUserHandler == nil {
		unregistered = append(unregistered, "user.GetUserHandler")
	}
	if o.UserGetUserInfoHandler == nil {
		unregistered = append(unregistered, "user.GetUserInfoHandler")
	}
	if o.UserGetUsersHandler == nil {
		unregistered = append(unregistered, "user.GetUsersHandler")
	}
	if o.UserLoginHandler == nil {
		unregistered = append(unregistered, "user.LoginHandler")
	}
	if o.UserLogoutHandler == nil {
		unregistered = append(unregistered, "user.LogoutHandler")
	}
	if o.DgaModifyEarlyAlarmConfigHandler == nil {
		unregistered = append(unregistered, "dga.ModifyEarlyAlarmConfigHandler")
	}
	if o.AlarmModifyLimitAlarmConfigHandler == nil {
		unregistered = append(unregistered, "alarm.ModifyLimitAlarmConfigHandler")
	}
	if o.ConfigModifyTransferAlarmConfigHandler == nil {
		unregistered = append(unregistered, "config.ModifyTransferAlarmConfigHandler")
	}
	if o.SystemPingHandler == nil {
		unregistered = append(unregistered, "system.PingHandler")
	}
	if o.DgaReceiveDataHandler == nil {
		unregistered = append(unregistered, "dga.ReceiveDataHandler")
	}
	if o.OauthRefreshTokenHandler == nil {
		unregistered = append(unregistered, "oauth.RefreshTokenHandler")
	}
	if o.TemplateSynchronizeDeviceTemplateInfoHandler == nil {
		unregistered = append(unregistered, "template.SynchronizeDeviceTemplateInfoHandler")
	}
	if o.OauthTokenHandler == nil {
		unregistered = append(unregistered, "oauth.TokenHandler")
	}
	if o.ConfigUpdateAlarmConfigsHandler == nil {
		unregistered = append(unregistered, "config.UpdateAlarmConfigsHandler")
	}
	if o.ConfigUpdateCleaningActiveRuleHandler == nil {
		unregistered = append(unregistered, "config.UpdateCleaningActiveRuleHandler")
	}
	if o.ConfigUpdateCleaningConfigsHandler == nil {
		unregistered = append(unregistered, "config.UpdateCleaningConfigsHandler")
	}
	if o.DeviceUpdateDeviceHandler == nil {
		unregistered = append(unregistered, "device.UpdateDeviceHandler")
	}
	if o.TemplateUpdateDeviceFieldInfoHandler == nil {
		unregistered = append(unregistered, "template.UpdateDeviceFieldInfoHandler")
	}
	if o.TemplateUpdateDeviceProfileInfoHandler == nil {
		unregistered = append(unregistered, "template.UpdateDeviceProfileInfoHandler")
	}
	if o.DgaUpdateEarlyAlarmConfigHandler == nil {
		unregistered = append(unregistered, "dga.UpdateEarlyAlarmConfigHandler")
	}
	if o.AlarmUpdateLimitAlarmConfigHandler == nil {
		unregistered = append(unregistered, "alarm.UpdateLimitAlarmConfigHandler")
	}
	if o.ConfigUpdateTransferAlarmConfigHandler == nil {
		unregistered = append(unregistered, "config.UpdateTransferAlarmConfigHandler")
	}
	if o.UserUpdateUserHandler == nil {
		unregistered = append(unregistered, "user.UpdateUserHandler")
	}
	if o.DeviceUploadDevicesHandler == nil {
		unregistered = append(unregistered, "device.UploadDevicesHandler")
	}
	if o.SystemVersionHandler == nil {
		unregistered = append(unregistered, "system.VersionHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *MaterialAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *MaterialAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "OAuth2":
			result[name] = o.BearerAuthenticator(name, func(token string, scopes []string) (interface{}, error) {
				return o.OAuth2Auth(token, scopes)
			})

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *MaterialAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *MaterialAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/json":
			result["application/json"] = o.JSONConsumer
		case "application/x-www-form-urlencoded":
			result["application/x-www-form-urlencoded"] = o.UrlformConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *MaterialAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *MaterialAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the material API
func (o *MaterialAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *MaterialAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/analysis/aggregate/{operation}"] = analysis.NewAggregate(o.context, o.AnalysisAggregateHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/user"] = user.NewChangeCurrentUserPassword(o.context, o.UserChangeCurrentUserPasswordHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/user/{id}"] = user.NewChangeUserPassword(o.context, o.UserChangeUserPasswordHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/devices/phase/check"] = device.NewCheckBasicsDevicePhase(o.context, o.DeviceCheckBasicsDevicePhaseHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/config"] = system.NewConfig(o.context, o.SystemConfigHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/alarms/early/confirm"] = dga.NewConfirmEarlyAlarm(o.context, o.DgaConfirmEarlyAlarmHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/alarms/intelligence/confirm"] = alarm.NewConfirmIntelligenceAlarm(o.context, o.AlarmConfirmIntelligenceAlarmHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/alarms/limit/confirm"] = alarm.NewConfirmLimitAlarm(o.context, o.AlarmConfirmLimitAlarmHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/alarms/transfer/confirm"] = alarm.NewConfirmTransferAlarm(o.context, o.AlarmConfirmTransferAlarmHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/configs/alarms/task"] = config.NewControlAlarmTask(o.context, o.ConfigControlAlarmTaskHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/configs/cleaning"] = config.NewCreateCleaningConfigs(o.context, o.ConfigCreateCleaningConfigsHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/devices"] = device.NewCreateDevice(o.context, o.DeviceCreateDeviceHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/user"] = user.NewCreateUser(o.context, o.UserCreateUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/configs/cleaning"] = config.NewDeleteCleaningConfigs(o.context, o.ConfigDeleteCleaningConfigsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/devices"] = device.NewDeleteDevice(o.context, o.DeviceDeleteDeviceHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/user/{id}"] = user.NewDeleteUser(o.context, o.UserDeleteUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/file/download"] = file.NewDownloadFile(o.context, o.FileDownloadFileHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/configs/alarms"] = config.NewGetAlarmConfigs(o.context, o.ConfigGetAlarmConfigsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/basics"] = device.NewGetBasicsDevices(o.context, o.DeviceGetBasicsDevicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/configs/cleaning"] = config.NewGetCleaningConfigs(o.context, o.ConfigGetCleaningConfigsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/devices"] = alarm.NewGetDeviceAlarms(o.context, o.AlarmGetDeviceAlarmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/charts"] = data.NewGetDeviceCharts(o.context, o.DataGetDeviceChartsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/templates/fields"] = template.NewGetDeviceFieldInfos(o.context, o.TemplateGetDeviceFieldInfosHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/templates"] = template.NewGetDeviceTemplateInfos(o.context, o.TemplateGetDeviceTemplateInfosHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/values"] = data.NewGetDeviceValues(o.context, o.DataGetDeviceValuesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices"] = device.NewGetDevices(o.context, o.DeviceGetDevicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/dga/early/config"] = dga.NewGetEarlyAlarmConfig(o.context, o.DgaGetEarlyAlarmConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/early"] = dga.NewGetEarlyAlarms(o.context, o.DgaGetEarlyAlarmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/early/history"] = dga.NewGetEarlyHistoryAlarms(o.context, o.DgaGetEarlyHistoryAlarmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/limit/history"] = alarm.NewGetHistoryLimitAlarms(o.context, o.AlarmGetHistoryLimitAlarmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/transfer/history"] = alarm.NewGetHistoryTransferAlarms(o.context, o.AlarmGetHistoryTransferAlarmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/intelligence"] = alarm.NewGetIntelligenceAlarms(o.context, o.AlarmGetIntelligenceAlarmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/limit/config"] = alarm.NewGetLimitAlarmConfig(o.context, o.AlarmGetLimitAlarmConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/limit"] = alarm.NewGetLimitAlarms(o.context, o.AlarmGetLimitAlarmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/logs"] = logr.NewGetLogs(o.context, o.LogrGetLogsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/charts/longitudinal"] = data.NewGetLongitudinalCharts(o.context, o.DataGetLongitudinalChartsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/testing/similar"] = device.NewGetSimilarTestingDevices(o.context, o.DeviceGetSimilarTestingDevicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/configs/alarms/transfer"] = config.NewGetTransferAlarmConfig(o.context, o.ConfigGetTransferAlarmConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/alarms/transfer"] = alarm.NewGetTransferAlarms(o.context, o.AlarmGetTransferAlarmsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/devices/charts/transverse"] = data.NewGetTransverseCharts(o.context, o.DataGetTransverseChartsHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/user/{id}"] = user.NewGetUser(o.context, o.UserGetUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/user"] = user.NewGetUserInfo(o.context, o.UserGetUserInfoHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/users"] = user.NewGetUsers(o.context, o.UserGetUsersHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/login"] = user.NewLogin(o.context, o.UserLoginHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/logout"] = user.NewLogout(o.context, o.UserLogoutHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/dga/early/config/field"] = dga.NewModifyEarlyAlarmConfig(o.context, o.DgaModifyEarlyAlarmConfigHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/alarms/limit/config/field"] = alarm.NewModifyLimitAlarmConfig(o.context, o.AlarmModifyLimitAlarmConfigHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/configs/alarms/transfer/field"] = config.NewModifyTransferAlarmConfig(o.context, o.ConfigModifyTransferAlarmConfigHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/ping"] = system.NewPing(o.context, o.SystemPingHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/dga/receive"] = dga.NewReceiveData(o.context, o.DgaReceiveDataHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/oauth/token/refresh"] = oauth.NewRefreshToken(o.context, o.OauthRefreshTokenHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/devices/templates/synchronize"] = template.NewSynchronizeDeviceTemplateInfo(o.context, o.TemplateSynchronizeDeviceTemplateInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/oauth/token"] = oauth.NewToken(o.context, o.OauthTokenHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/configs/alarms"] = config.NewUpdateAlarmConfigs(o.context, o.ConfigUpdateAlarmConfigsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/configs/cleaning/active"] = config.NewUpdateCleaningActiveRule(o.context, o.ConfigUpdateCleaningActiveRuleHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/configs/cleaning"] = config.NewUpdateCleaningConfigs(o.context, o.ConfigUpdateCleaningConfigsHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/devices"] = device.NewUpdateDevice(o.context, o.DeviceUpdateDeviceHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/devices/templates/fields"] = template.NewUpdateDeviceFieldInfo(o.context, o.TemplateUpdateDeviceFieldInfoHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/devices/templates/profiles"] = template.NewUpdateDeviceProfileInfo(o.context, o.TemplateUpdateDeviceProfileInfoHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/dga/early/config"] = dga.NewUpdateEarlyAlarmConfig(o.context, o.DgaUpdateEarlyAlarmConfigHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/alarms/limit/config"] = alarm.NewUpdateLimitAlarmConfig(o.context, o.AlarmUpdateLimitAlarmConfigHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/configs/alarms/transfer"] = config.NewUpdateTransferAlarmConfig(o.context, o.ConfigUpdateTransferAlarmConfigHandler)
	if o.handlers["PUT"] == nil {
		o.handlers["PUT"] = make(map[string]http.Handler)
	}
	o.handlers["PUT"]["/v1/user/{id}"] = user.NewUpdateUser(o.context, o.UserUpdateUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/devices/upload"] = device.NewUploadDevices(o.context, o.DeviceUploadDevicesHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/version"] = system.NewVersion(o.context, o.SystemVersionHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *MaterialAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *MaterialAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *MaterialAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *MaterialAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *MaterialAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
