// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	v1 "swagger/apiserver/v1"
)

// CreateCleaningConfigsHandlerFunc turns a function with the right signature into a create cleaning configs handler
type CreateCleaningConfigsHandlerFunc func(CreateCleaningConfigsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateCleaningConfigsHandlerFunc) Handle(params CreateCleaningConfigsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateCleaningConfigsHandler interface for that can handle valid create cleaning configs params
type CreateCleaningConfigsHandler interface {
	Handle(CreateCleaningConfigsParams, interface{}) middleware.Responder
}

// NewCreateCleaningConfigs creates a new http.Handler for the create cleaning configs operation
func NewCreateCleaningConfigs(ctx *middleware.Context, handler CreateCleaningConfigsHandler) *CreateCleaningConfigs {
	return &CreateCleaningConfigs{Context: ctx, Handler: handler}
}

/*CreateCleaningConfigs swagger:route POST /v1/configs/cleaning config createCleaningConfigs

添加系统配置-数据清洗信息

添加系统配置-数据清洗信息

*/
type CreateCleaningConfigs struct {
	Context *middleware.Context
	Handler CreateCleaningConfigsHandler
}

func (o *CreateCleaningConfigs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateCleaningConfigsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateCleaningConfigsBody create cleaning configs body
//
// swagger:model CreateCleaningConfigsBody
type CreateCleaningConfigsBody struct {

	// 设备类型
	DeviceProfile string `json:"deviceProfile,omitempty"`

	// rule
	Rule *v1.CleaningRules `json:"rule,omitempty"`
}

// Validate validates this create cleaning configs body
func (o *CreateCleaningConfigsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCleaningConfigsBody) validateRule(formats strfmt.Registry) error {

	if swag.IsZero(o.Rule) { // not required
		return nil
	}

	if o.Rule != nil {
		if err := o.Rule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "rule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCleaningConfigsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCleaningConfigsBody) UnmarshalBinary(b []byte) error {
	var res CreateCleaningConfigsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
