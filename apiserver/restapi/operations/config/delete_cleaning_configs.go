// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeleteCleaningConfigsHandlerFunc turns a function with the right signature into a delete cleaning configs handler
type DeleteCleaningConfigsHandlerFunc func(DeleteCleaningConfigsParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteCleaningConfigsHandlerFunc) Handle(params DeleteCleaningConfigsParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteCleaningConfigsHandler interface for that can handle valid delete cleaning configs params
type DeleteCleaningConfigsHandler interface {
	Handle(DeleteCleaningConfigsParams, interface{}) middleware.Responder
}

// NewDeleteCleaningConfigs creates a new http.Handler for the delete cleaning configs operation
func NewDeleteCleaningConfigs(ctx *middleware.Context, handler DeleteCleaningConfigsHandler) *DeleteCleaningConfigs {
	return &DeleteCleaningConfigs{Context: ctx, Handler: handler}
}

/*DeleteCleaningConfigs swagger:route DELETE /v1/configs/cleaning config deleteCleaningConfigs

删除系统配置-数据清洗信息

删除系统配置-数据清洗信息

*/
type DeleteCleaningConfigs struct {
	Context *middleware.Context
	Handler DeleteCleaningConfigsHandler
}

func (o *DeleteCleaningConfigs) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteCleaningConfigsParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteCleaningConfigsBody delete cleaning configs body
//
// swagger:model DeleteCleaningConfigsBody
type DeleteCleaningConfigsBody struct {

	// 配置ID
	ConfigID string `json:"configId,omitempty"`

	// 规则ID
	RuleID string `json:"ruleId,omitempty"`
}

// Validate validates this delete cleaning configs body
func (o *DeleteCleaningConfigsBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *DeleteCleaningConfigsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteCleaningConfigsBody) UnmarshalBinary(b []byte) error {
	var res DeleteCleaningConfigsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
