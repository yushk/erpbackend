// Code generated by go-swagger; DO NOT EDIT.

package config

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	v1 "swagger/apiserver/v1"
)

// ControlAlarmTaskHandlerFunc turns a function with the right signature into a control alarm task handler
type ControlAlarmTaskHandlerFunc func(ControlAlarmTaskParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ControlAlarmTaskHandlerFunc) Handle(params ControlAlarmTaskParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// ControlAlarmTaskHandler interface for that can handle valid control alarm task params
type ControlAlarmTaskHandler interface {
	Handle(ControlAlarmTaskParams, *v1.Principal) middleware.Responder
}

// NewControlAlarmTask creates a new http.Handler for the control alarm task operation
func NewControlAlarmTask(ctx *middleware.Context, handler ControlAlarmTaskHandler) *ControlAlarmTask {
	return &ControlAlarmTask{Context: ctx, Handler: handler}
}

/*ControlAlarmTask swagger:route PUT /v1/configs/alarms/task config controlAlarmTask

控制解析告警任务

控制解析告警任务

*/
type ControlAlarmTask struct {
	Context *middleware.Context
	Handler ControlAlarmTaskHandler
}

func (o *ControlAlarmTask) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewControlAlarmTaskParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ControlAlarmTaskBody control alarm task body
//
// swagger:model ControlAlarmTaskBody
type ControlAlarmTaskBody struct {

	// 控制操作（1:开启，0:暂停）
	Operation int64 `json:"operation,omitempty"`

	// 解析告警配置ID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this control alarm task body
func (o *ControlAlarmTaskBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ControlAlarmTaskBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ControlAlarmTaskBody) UnmarshalBinary(b []byte) error {
	var res ControlAlarmTaskBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
