// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetTransverseChartsParams creates a new GetTransverseChartsParams object
// no default values defined in spec.
func NewGetTransverseChartsParams() GetTransverseChartsParams {

	return GetTransverseChartsParams{}
}

// GetTransverseChartsParams contains all the bound params for the get transverse charts operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetTransverseCharts
type GetTransverseChartsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*周期变化率是否取绝对值（是：1，否：0）
	  In: query
	*/
	AbsoluteFlag *int64
	/*基础设备名称
	  In: query
	*/
	BasicDeviceName *string
	/*是否数据清洗（是：1，否：0）
	  In: query
	*/
	CleaningFlag *int64
	/*周期变化率的周期
	  In: query
	*/
	CycleTime *int64
	/*设备类型
	  In: query
	*/
	DeviceType *string
	/*搜索列表条件
	  In: query
	*/
	Q *string
	/*同类检测设备列表
	  In: query
	*/
	SimilarTestingDevices []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetTransverseChartsParams() beforehand.
func (o *GetTransverseChartsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAbsoluteFlag, qhkAbsoluteFlag, _ := qs.GetOK("absoluteFlag")
	if err := o.bindAbsoluteFlag(qAbsoluteFlag, qhkAbsoluteFlag, route.Formats); err != nil {
		res = append(res, err)
	}

	qBasicDeviceName, qhkBasicDeviceName, _ := qs.GetOK("basicDeviceName")
	if err := o.bindBasicDeviceName(qBasicDeviceName, qhkBasicDeviceName, route.Formats); err != nil {
		res = append(res, err)
	}

	qCleaningFlag, qhkCleaningFlag, _ := qs.GetOK("cleaningFlag")
	if err := o.bindCleaningFlag(qCleaningFlag, qhkCleaningFlag, route.Formats); err != nil {
		res = append(res, err)
	}

	qCycleTime, qhkCycleTime, _ := qs.GetOK("cycleTime")
	if err := o.bindCycleTime(qCycleTime, qhkCycleTime, route.Formats); err != nil {
		res = append(res, err)
	}

	qDeviceType, qhkDeviceType, _ := qs.GetOK("deviceType")
	if err := o.bindDeviceType(qDeviceType, qhkDeviceType, route.Formats); err != nil {
		res = append(res, err)
	}

	qQ, qhkQ, _ := qs.GetOK("q")
	if err := o.bindQ(qQ, qhkQ, route.Formats); err != nil {
		res = append(res, err)
	}

	qSimilarTestingDevices, qhkSimilarTestingDevices, _ := qs.GetOK("similarTestingDevices")
	if err := o.bindSimilarTestingDevices(qSimilarTestingDevices, qhkSimilarTestingDevices, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAbsoluteFlag binds and validates parameter AbsoluteFlag from query.
func (o *GetTransverseChartsParams) bindAbsoluteFlag(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("absoluteFlag", "query", "int64", raw)
	}
	o.AbsoluteFlag = &value

	return nil
}

// bindBasicDeviceName binds and validates parameter BasicDeviceName from query.
func (o *GetTransverseChartsParams) bindBasicDeviceName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.BasicDeviceName = &raw

	return nil
}

// bindCleaningFlag binds and validates parameter CleaningFlag from query.
func (o *GetTransverseChartsParams) bindCleaningFlag(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("cleaningFlag", "query", "int64", raw)
	}
	o.CleaningFlag = &value

	return nil
}

// bindCycleTime binds and validates parameter CycleTime from query.
func (o *GetTransverseChartsParams) bindCycleTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("cycleTime", "query", "int64", raw)
	}
	o.CycleTime = &value

	return nil
}

// bindDeviceType binds and validates parameter DeviceType from query.
func (o *GetTransverseChartsParams) bindDeviceType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.DeviceType = &raw

	return nil
}

// bindQ binds and validates parameter Q from query.
func (o *GetTransverseChartsParams) bindQ(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Q = &raw

	return nil
}

// bindSimilarTestingDevices binds and validates array parameter SimilarTestingDevices from query.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GetTransverseChartsParams) bindSimilarTestingDevices(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvSimilarTestingDevices string
	if len(rawData) > 0 {
		qvSimilarTestingDevices = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	similarTestingDevicesIC := swag.SplitByFormat(qvSimilarTestingDevices, "")
	if len(similarTestingDevicesIC) == 0 {
		return nil
	}

	var similarTestingDevicesIR []string
	for _, similarTestingDevicesIV := range similarTestingDevicesIC {
		similarTestingDevicesI := similarTestingDevicesIV

		similarTestingDevicesIR = append(similarTestingDevicesIR, similarTestingDevicesI)
	}

	o.SimilarTestingDevices = similarTestingDevicesIR

	return nil
}
