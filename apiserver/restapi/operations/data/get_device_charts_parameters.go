// Code generated by go-swagger; DO NOT EDIT.

package data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetDeviceChartsParams creates a new GetDeviceChartsParams object
// no default values defined in spec.
func NewGetDeviceChartsParams() GetDeviceChartsParams {

	return GetDeviceChartsParams{}
}

// GetDeviceChartsParams contains all the bound params for the get device charts operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetDeviceCharts
type GetDeviceChartsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*是否数据清洗（是：1，否：0）
	  In: query
	*/
	CleaningFlag *int64
	/*数据上限
	  In: query
	*/
	Limit *int64
	/*搜索列表条件
	  In: query
	*/
	Q *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetDeviceChartsParams() beforehand.
func (o *GetDeviceChartsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCleaningFlag, qhkCleaningFlag, _ := qs.GetOK("cleaningFlag")
	if err := o.bindCleaningFlag(qCleaningFlag, qhkCleaningFlag, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qQ, qhkQ, _ := qs.GetOK("q")
	if err := o.bindQ(qQ, qhkQ, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCleaningFlag binds and validates parameter CleaningFlag from query.
func (o *GetDeviceChartsParams) bindCleaningFlag(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("cleaningFlag", "query", "int64", raw)
	}
	o.CleaningFlag = &value

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetDeviceChartsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int64", raw)
	}
	o.Limit = &value

	return nil
}

// bindQ binds and validates parameter Q from query.
func (o *GetDeviceChartsParams) bindQ(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Q = &raw

	return nil
}
