// Code generated by go-swagger; DO NOT EDIT.

package oauth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewRefreshTokenParams creates a new RefreshTokenParams object
// with the default values initialized.
func NewRefreshTokenParams() RefreshTokenParams {

	var (
		// initialize parameters with default values

		grantTypeDefault = string("refresh_token")
	)

	return RefreshTokenParams{
		GrantType: &grantTypeDefault,
	}
}

// RefreshTokenParams contains all the bound params for the refresh token operation
// typically these are obtained from a http.Request
//
// swagger:parameters RefreshToken
type RefreshTokenParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*认证类型
	  In: formData
	  Default: "refresh_token"
	*/
	GrantType *string
	/*认证token
	  Required: true
	  In: formData
	*/
	RefreshToken string
	/*参数
	  Required: true
	  In: formData
	*/
	Scope string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewRefreshTokenParams() beforehand.
func (o *RefreshTokenParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdGrantType, fdhkGrantType, _ := fds.GetOK("grant_type")
	if err := o.bindGrantType(fdGrantType, fdhkGrantType, route.Formats); err != nil {
		res = append(res, err)
	}

	fdRefreshToken, fdhkRefreshToken, _ := fds.GetOK("refresh_token")
	if err := o.bindRefreshToken(fdRefreshToken, fdhkRefreshToken, route.Formats); err != nil {
		res = append(res, err)
	}

	fdScope, fdhkScope, _ := fds.GetOK("scope")
	if err := o.bindScope(fdScope, fdhkScope, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindGrantType binds and validates parameter GrantType from formData.
func (o *RefreshTokenParams) bindGrantType(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewRefreshTokenParams()
		return nil
	}

	o.GrantType = &raw

	return nil
}

// bindRefreshToken binds and validates parameter RefreshToken from formData.
func (o *RefreshTokenParams) bindRefreshToken(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("refresh_token", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("refresh_token", "formData", raw); err != nil {
		return err
	}

	o.RefreshToken = raw

	return nil
}

// bindScope binds and validates parameter Scope from formData.
func (o *RefreshTokenParams) bindScope(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("scope", "formData", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("scope", "formData", raw); err != nil {
		return err
	}

	o.Scope = raw

	return nil
}
