// Code generated by go-swagger; DO NOT EDIT.

package alarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfirmIntelligenceAlarmHandlerFunc turns a function with the right signature into a confirm intelligence alarm handler
type ConfirmIntelligenceAlarmHandlerFunc func(ConfirmIntelligenceAlarmParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ConfirmIntelligenceAlarmHandlerFunc) Handle(params ConfirmIntelligenceAlarmParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ConfirmIntelligenceAlarmHandler interface for that can handle valid confirm intelligence alarm params
type ConfirmIntelligenceAlarmHandler interface {
	Handle(ConfirmIntelligenceAlarmParams, interface{}) middleware.Responder
}

// NewConfirmIntelligenceAlarm creates a new http.Handler for the confirm intelligence alarm operation
func NewConfirmIntelligenceAlarm(ctx *middleware.Context, handler ConfirmIntelligenceAlarmHandler) *ConfirmIntelligenceAlarm {
	return &ConfirmIntelligenceAlarm{Context: ctx, Handler: handler}
}

/*ConfirmIntelligenceAlarm swagger:route PUT /v1/alarms/intelligence/confirm alarm confirmIntelligenceAlarm

确认智能告警

确认智能告警

*/
type ConfirmIntelligenceAlarm struct {
	Context *middleware.Context
	Handler ConfirmIntelligenceAlarmHandler
}

func (o *ConfirmIntelligenceAlarm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConfirmIntelligenceAlarmParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ConfirmIntelligenceAlarmBody confirm intelligence alarm body
//
// swagger:model ConfirmIntelligenceAlarmBody
type ConfirmIntelligenceAlarmBody struct {

	// 智能告警ID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this confirm intelligence alarm body
func (o *ConfirmIntelligenceAlarmBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ConfirmIntelligenceAlarmBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfirmIntelligenceAlarmBody) UnmarshalBinary(b []byte) error {
	var res ConfirmIntelligenceAlarmBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
