// Code generated by go-swagger; DO NOT EDIT.

package alarm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ConfirmTransferAlarmHandlerFunc turns a function with the right signature into a confirm transfer alarm handler
type ConfirmTransferAlarmHandlerFunc func(ConfirmTransferAlarmParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn ConfirmTransferAlarmHandlerFunc) Handle(params ConfirmTransferAlarmParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// ConfirmTransferAlarmHandler interface for that can handle valid confirm transfer alarm params
type ConfirmTransferAlarmHandler interface {
	Handle(ConfirmTransferAlarmParams, interface{}) middleware.Responder
}

// NewConfirmTransferAlarm creates a new http.Handler for the confirm transfer alarm operation
func NewConfirmTransferAlarm(ctx *middleware.Context, handler ConfirmTransferAlarmHandler) *ConfirmTransferAlarm {
	return &ConfirmTransferAlarm{Context: ctx, Handler: handler}
}

/*ConfirmTransferAlarm swagger:route PUT /v1/alarms/transfer/confirm alarm confirmTransferAlarm

确认传输告警

确认传输告警

*/
type ConfirmTransferAlarm struct {
	Context *middleware.Context
	Handler ConfirmTransferAlarmHandler
}

func (o *ConfirmTransferAlarm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConfirmTransferAlarmParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// ConfirmTransferAlarmBody confirm transfer alarm body
//
// swagger:model ConfirmTransferAlarmBody
type ConfirmTransferAlarmBody struct {

	// 传输告警ID
	UUID string `json:"uuid,omitempty"`
}

// Validate validates this confirm transfer alarm body
func (o *ConfirmTransferAlarmBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ConfirmTransferAlarmBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ConfirmTransferAlarmBody) UnmarshalBinary(b []byte) error {
	var res ConfirmTransferAlarmBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
