// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	v1 "swagger/apiserver/v1"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUserHandlerFunc turns a function with the right signature into a create user handler
type CreateUserHandlerFunc func(CreateUserParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUserHandlerFunc) Handle(params CreateUserParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateUserHandler interface for that can handle valid create user params
type CreateUserHandler interface {
	Handle(CreateUserParams, interface{}) middleware.Responder
}

// NewCreateUser creates a new http.Handler for the create user operation
func NewCreateUser(ctx *middleware.Context, handler CreateUserHandler) *CreateUser {
	return &CreateUser{Context: ctx, Handler: handler}
}

/*CreateUser swagger:route POST /v1/user user createUser

创建用户

创建单个用户

*/
type CreateUser struct {
	Context *middleware.Context
	Handler CreateUserHandler
}

func (o *CreateUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateUserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateUserBody create user body
//
// swagger:model CreateUserBody
type CreateUserBody struct {
	v1.User

	// 密码
	// Pattern: ^[a-zA-Z0-9_\-]{5,16}$
	Password string `json:"password,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateUserBody) UnmarshalJSON(raw []byte) error {
	// CreateUserParamsBodyAO0
	var createUserParamsBodyAO0 v1.User
	if err := swag.ReadJSON(raw, &createUserParamsBodyAO0); err != nil {
		return err
	}
	o.User = createUserParamsBodyAO0

	// CreateUserParamsBodyAO1
	var dataCreateUserParamsBodyAO1 struct {
		Password string `json:"password,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataCreateUserParamsBodyAO1); err != nil {
		return err
	}

	o.Password = dataCreateUserParamsBodyAO1.Password

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateUserBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	createUserParamsBodyAO0, err := swag.WriteJSON(o.User)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createUserParamsBodyAO0)
	var dataCreateUserParamsBodyAO1 struct {
		Password string `json:"password,omitempty"`
	}

	dataCreateUserParamsBodyAO1.Password = o.Password

	jsonDataCreateUserParamsBodyAO1, errCreateUserParamsBodyAO1 := swag.WriteJSON(dataCreateUserParamsBodyAO1)
	if errCreateUserParamsBodyAO1 != nil {
		return nil, errCreateUserParamsBodyAO1
	}
	_parts = append(_parts, jsonDataCreateUserParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create user body
func (o *CreateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with v1.User
	if err := o.User.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateUserBody) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(o.Password) { // not required
		return nil
	}

	if err := validate.Pattern("body"+"."+"password", "body", string(o.Password), `^[a-zA-Z0-9_\-]{5,16}$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateUserBody) UnmarshalBinary(b []byte) error {
	var res CreateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
