// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ConfigHandlerFunc turns a function with the right signature into a config handler
type ConfigHandlerFunc func(ConfigParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ConfigHandlerFunc) Handle(params ConfigParams) middleware.Responder {
	return fn(params)
}

// ConfigHandler interface for that can handle valid config params
type ConfigHandler interface {
	Handle(ConfigParams) middleware.Responder
}

// NewConfig creates a new http.Handler for the config operation
func NewConfig(ctx *middleware.Context, handler ConfigHandler) *Config {
	return &Config{Context: ctx, Handler: handler}
}

/*Config swagger:route GET /v1/config system config

Config Resource

Fetch the current state of the service's configuration.

*/
type Config struct {
	Context *middleware.Context
	Handler ConfigHandler
}

func (o *Config) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewConfigParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
