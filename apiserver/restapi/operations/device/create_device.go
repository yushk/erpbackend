// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	v1 "swagger/apiserver/v1"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateDeviceHandlerFunc turns a function with the right signature into a create device handler
type CreateDeviceHandlerFunc func(CreateDeviceParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateDeviceHandlerFunc) Handle(params CreateDeviceParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// CreateDeviceHandler interface for that can handle valid create device params
type CreateDeviceHandler interface {
	Handle(CreateDeviceParams, *v1.Principal) middleware.Responder
}

// NewCreateDevice creates a new http.Handler for the create device operation
func NewCreateDevice(ctx *middleware.Context, handler CreateDeviceHandler) *CreateDevice {
	return &CreateDevice{Context: ctx, Handler: handler}
}

/*CreateDevice swagger:route POST /v1/devices device createDevice

新增设备

新增设备

*/
type CreateDevice struct {
	Context *middleware.Context
	Handler CreateDeviceHandler
}

func (o *CreateDevice) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateDeviceParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateDeviceBody create device body
//
// swagger:model CreateDeviceBody
type CreateDeviceBody struct {

	// 基础设备ID
	BasicsID string `json:"basicsId,omitempty"`

	// 设备名称
	BasicsName string `json:"basicsName,omitempty"`

	// 设备级别
	DeviceLevel int8 `json:"deviceLevel,omitempty"`

	// 相位
	Phase string `json:"phase,omitempty"`

	// 变电站名称
	StationName string `json:"stationName,omitempty"`

	// 检测设备名称
	TestingName string `json:"testingName,omitempty"`

	// 是否区分相位
	ThreePhase string `json:"threePhase,omitempty"`
}

// Validate validates this create device body
func (o *CreateDeviceBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateDeviceBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateDeviceBody) UnmarshalBinary(b []byte) error {
	var res CreateDeviceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
