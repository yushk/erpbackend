// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckBasicsDevicePhaseHandlerFunc turns a function with the right signature into a check basics device phase handler
type CheckBasicsDevicePhaseHandlerFunc func(CheckBasicsDevicePhaseParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CheckBasicsDevicePhaseHandlerFunc) Handle(params CheckBasicsDevicePhaseParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CheckBasicsDevicePhaseHandler interface for that can handle valid check basics device phase params
type CheckBasicsDevicePhaseHandler interface {
	Handle(CheckBasicsDevicePhaseParams, interface{}) middleware.Responder
}

// NewCheckBasicsDevicePhase creates a new http.Handler for the check basics device phase operation
func NewCheckBasicsDevicePhase(ctx *middleware.Context, handler CheckBasicsDevicePhaseHandler) *CheckBasicsDevicePhase {
	return &CheckBasicsDevicePhase{Context: ctx, Handler: handler}
}

/*CheckBasicsDevicePhase swagger:route POST /v1/devices/phase/check device checkBasicsDevicePhase

检查设备是否区分相位

检查设备是否区分相位

*/
type CheckBasicsDevicePhase struct {
	Context *middleware.Context
	Handler CheckBasicsDevicePhaseHandler
}

func (o *CheckBasicsDevicePhase) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCheckBasicsDevicePhaseParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CheckBasicsDevicePhaseBody check basics device phase body
//
// swagger:model CheckBasicsDevicePhaseBody
type CheckBasicsDevicePhaseBody struct {

	// 基础设备ID
	BasicsID string `json:"basicsId,omitempty"`
}

// Validate validates this check basics device phase body
func (o *CheckBasicsDevicePhaseBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CheckBasicsDevicePhaseBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckBasicsDevicePhaseBody) UnmarshalBinary(b []byte) error {
	var res CheckBasicsDevicePhaseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// CheckBasicsDevicePhaseOKBody check basics device phase o k body
//
// swagger:model CheckBasicsDevicePhaseOKBody
type CheckBasicsDevicePhaseOKBody struct {

	// 是否区分相位
	// Required: true
	ThreePhase *string `json:"threePhase"`
}

// Validate validates this check basics device phase o k body
func (o *CheckBasicsDevicePhaseOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateThreePhase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CheckBasicsDevicePhaseOKBody) validateThreePhase(formats strfmt.Registry) error {

	if err := validate.Required("checkBasicsDevicePhaseOK"+"."+"threePhase", "body", o.ThreePhase); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CheckBasicsDevicePhaseOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CheckBasicsDevicePhaseOKBody) UnmarshalBinary(b []byte) error {
	var res CheckBasicsDevicePhaseOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
