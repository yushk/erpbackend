// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	v1 "swagger/apiserver/v1"
)

// UploadDevicesHandlerFunc turns a function with the right signature into a upload devices handler
type UploadDevicesHandlerFunc func(UploadDevicesParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadDevicesHandlerFunc) Handle(params UploadDevicesParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// UploadDevicesHandler interface for that can handle valid upload devices params
type UploadDevicesHandler interface {
	Handle(UploadDevicesParams, *v1.Principal) middleware.Responder
}

// NewUploadDevices creates a new http.Handler for the upload devices operation
func NewUploadDevices(ctx *middleware.Context, handler UploadDevicesHandler) *UploadDevices {
	return &UploadDevices{Context: ctx, Handler: handler}
}

/*UploadDevices swagger:route POST /v1/devices/upload device uploadDevices

上传设备

上传设备

*/
type UploadDevices struct {
	Context *middleware.Context
	Handler UploadDevicesHandler
}

func (o *UploadDevices) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUploadDevicesParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UploadDevicesBody upload devices body
//
// swagger:model UploadDevicesBody
type UploadDevicesBody struct {

	// device infos
	DeviceInfos []*v1.UploadDeviceInfo `json:"deviceInfos"`
}

// Validate validates this upload devices body
func (o *UploadDevicesBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDeviceInfos(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadDevicesBody) validateDeviceInfos(formats strfmt.Registry) error {

	if swag.IsZero(o.DeviceInfos) { // not required
		return nil
	}

	for i := 0; i < len(o.DeviceInfos); i++ {
		if swag.IsZero(o.DeviceInfos[i]) { // not required
			continue
		}

		if o.DeviceInfos[i] != nil {
			if err := o.DeviceInfos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "deviceInfos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UploadDevicesBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadDevicesBody) UnmarshalBinary(b []byte) error {
	var res UploadDevicesBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
