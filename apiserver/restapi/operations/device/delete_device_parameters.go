// Code generated by go-swagger; DO NOT EDIT.

package device

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteDeviceParams creates a new DeleteDeviceParams object
// no default values defined in spec.
func NewDeleteDeviceParams() DeleteDeviceParams {

	return DeleteDeviceParams{}
}

// DeleteDeviceParams contains all the bound params for the delete device operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteDevice
type DeleteDeviceParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*基础设备名称
	  In: query
	*/
	BasicsName *string
	/*设备级别
	  In: query
	*/
	DeviceLevel *int8
	/*变电站名称
	  In: query
	*/
	StationName *string
	/*检测设备名称
	  In: query
	*/
	TestingName *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteDeviceParams() beforehand.
func (o *DeleteDeviceParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qBasicsName, qhkBasicsName, _ := qs.GetOK("basicsName")
	if err := o.bindBasicsName(qBasicsName, qhkBasicsName, route.Formats); err != nil {
		res = append(res, err)
	}

	qDeviceLevel, qhkDeviceLevel, _ := qs.GetOK("deviceLevel")
	if err := o.bindDeviceLevel(qDeviceLevel, qhkDeviceLevel, route.Formats); err != nil {
		res = append(res, err)
	}

	qStationName, qhkStationName, _ := qs.GetOK("stationName")
	if err := o.bindStationName(qStationName, qhkStationName, route.Formats); err != nil {
		res = append(res, err)
	}

	qTestingName, qhkTestingName, _ := qs.GetOK("testingName")
	if err := o.bindTestingName(qTestingName, qhkTestingName, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBasicsName binds and validates parameter BasicsName from query.
func (o *DeleteDeviceParams) bindBasicsName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.BasicsName = &raw

	return nil
}

// bindDeviceLevel binds and validates parameter DeviceLevel from query.
func (o *DeleteDeviceParams) bindDeviceLevel(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt8(raw)
	if err != nil {
		return errors.InvalidType("deviceLevel", "query", "int8", raw)
	}
	o.DeviceLevel = &value

	return nil
}

// bindStationName binds and validates parameter StationName from query.
func (o *DeleteDeviceParams) bindStationName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.StationName = &raw

	return nil
}

// bindTestingName binds and validates parameter TestingName from query.
func (o *DeleteDeviceParams) bindTestingName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.TestingName = &raw

	return nil
}
