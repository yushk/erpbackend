// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetDeviceTemplateInfosHandlerFunc turns a function with the right signature into a get device template infos handler
type GetDeviceTemplateInfosHandlerFunc func(GetDeviceTemplateInfosParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDeviceTemplateInfosHandlerFunc) Handle(params GetDeviceTemplateInfosParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// GetDeviceTemplateInfosHandler interface for that can handle valid get device template infos params
type GetDeviceTemplateInfosHandler interface {
	Handle(GetDeviceTemplateInfosParams, interface{}) middleware.Responder
}

// NewGetDeviceTemplateInfos creates a new http.Handler for the get device template infos operation
func NewGetDeviceTemplateInfos(ctx *middleware.Context, handler GetDeviceTemplateInfosHandler) *GetDeviceTemplateInfos {
	return &GetDeviceTemplateInfos{Context: ctx, Handler: handler}
}

/*GetDeviceTemplateInfos swagger:route GET /v1/devices/templates template getDeviceTemplateInfos

获取设备模版

获取设备模版

*/
type GetDeviceTemplateInfos struct {
	Context *middleware.Context
	Handler GetDeviceTemplateInfosHandler
}

func (o *GetDeviceTemplateInfos) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDeviceTemplateInfosParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
