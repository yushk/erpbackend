// Code generated by go-swagger; DO NOT EDIT.

package template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	v1 "swagger/apiserver/v1"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateDeviceProfileInfoHandlerFunc turns a function with the right signature into a update device profile info handler
type UpdateDeviceProfileInfoHandlerFunc func(UpdateDeviceProfileInfoParams, *v1.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateDeviceProfileInfoHandlerFunc) Handle(params UpdateDeviceProfileInfoParams, principal *v1.Principal) middleware.Responder {
	return fn(params, principal)
}

// UpdateDeviceProfileInfoHandler interface for that can handle valid update device profile info params
type UpdateDeviceProfileInfoHandler interface {
	Handle(UpdateDeviceProfileInfoParams, *v1.Principal) middleware.Responder
}

// NewUpdateDeviceProfileInfo creates a new http.Handler for the update device profile info operation
func NewUpdateDeviceProfileInfo(ctx *middleware.Context, handler UpdateDeviceProfileInfoHandler) *UpdateDeviceProfileInfo {
	return &UpdateDeviceProfileInfo{Context: ctx, Handler: handler}
}

/*UpdateDeviceProfileInfo swagger:route PUT /v1/devices/templates/profiles template updateDeviceProfileInfo

修改设备种类信息

修改设备种类信息

*/
type UpdateDeviceProfileInfo struct {
	Context *middleware.Context
	Handler UpdateDeviceProfileInfoHandler
}

func (o *UpdateDeviceProfileInfo) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateDeviceProfileInfoParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *v1.Principal
	if uprinc != nil {
		principal = uprinc.(*v1.Principal) // this is really a v1.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UpdateDeviceProfileInfoBody update device profile info body
//
// swagger:model UpdateDeviceProfileInfoBody
type UpdateDeviceProfileInfoBody struct {

	// 设备种类ID
	DeviceProfileID string `json:"deviceProfileId,omitempty"`

	// 设备种类展示名称
	ViewName string `json:"viewName,omitempty"`
}

// Validate validates this update device profile info body
func (o *UpdateDeviceProfileInfoBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UpdateDeviceProfileInfoBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateDeviceProfileInfoBody) UnmarshalBinary(b []byte) error {
	var res UpdateDeviceProfileInfoBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
